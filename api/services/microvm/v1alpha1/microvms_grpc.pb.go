// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MicroVMClient is the client API for MicroVM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MicroVMClient interface {
	CreateMicroVM(ctx context.Context, in *CreateMicroVMRequest, opts ...grpc.CallOption) (*CreateMicroVMResponse, error)
	DeleteMicroVM(ctx context.Context, in *DeleteMicroVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMicroVM(ctx context.Context, in *GetMicroVMRequest, opts ...grpc.CallOption) (*GetMicroVMResponse, error)
	ListMicroVMs(ctx context.Context, in *ListMicroVMsRequest, opts ...grpc.CallOption) (*ListMicroVMsResponse, error)
	ListMicroVMsStream(ctx context.Context, in *ListMicroVMsRequest, opts ...grpc.CallOption) (MicroVM_ListMicroVMsStreamClient, error)
}

type microVMClient struct {
	cc grpc.ClientConnInterface
}

func NewMicroVMClient(cc grpc.ClientConnInterface) MicroVMClient {
	return &microVMClient{cc}
}

func (c *microVMClient) CreateMicroVM(ctx context.Context, in *CreateMicroVMRequest, opts ...grpc.CallOption) (*CreateMicroVMResponse, error) {
	out := new(CreateMicroVMResponse)
	err := c.cc.Invoke(ctx, "/microvm.services.api.v1alpha1.MicroVM/CreateMicroVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microVMClient) DeleteMicroVM(ctx context.Context, in *DeleteMicroVMRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/microvm.services.api.v1alpha1.MicroVM/DeleteMicroVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microVMClient) GetMicroVM(ctx context.Context, in *GetMicroVMRequest, opts ...grpc.CallOption) (*GetMicroVMResponse, error) {
	out := new(GetMicroVMResponse)
	err := c.cc.Invoke(ctx, "/microvm.services.api.v1alpha1.MicroVM/GetMicroVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microVMClient) ListMicroVMs(ctx context.Context, in *ListMicroVMsRequest, opts ...grpc.CallOption) (*ListMicroVMsResponse, error) {
	out := new(ListMicroVMsResponse)
	err := c.cc.Invoke(ctx, "/microvm.services.api.v1alpha1.MicroVM/ListMicroVMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microVMClient) ListMicroVMsStream(ctx context.Context, in *ListMicroVMsRequest, opts ...grpc.CallOption) (MicroVM_ListMicroVMsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MicroVM_ServiceDesc.Streams[0], "/microvm.services.api.v1alpha1.MicroVM/ListMicroVMsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &microVMListMicroVMsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MicroVM_ListMicroVMsStreamClient interface {
	Recv() (*ListMessage, error)
	grpc.ClientStream
}

type microVMListMicroVMsStreamClient struct {
	grpc.ClientStream
}

func (x *microVMListMicroVMsStreamClient) Recv() (*ListMessage, error) {
	m := new(ListMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MicroVMServer is the server API for MicroVM service.
// All implementations should embed UnimplementedMicroVMServer
// for forward compatibility
type MicroVMServer interface {
	CreateMicroVM(context.Context, *CreateMicroVMRequest) (*CreateMicroVMResponse, error)
	DeleteMicroVM(context.Context, *DeleteMicroVMRequest) (*emptypb.Empty, error)
	GetMicroVM(context.Context, *GetMicroVMRequest) (*GetMicroVMResponse, error)
	ListMicroVMs(context.Context, *ListMicroVMsRequest) (*ListMicroVMsResponse, error)
	ListMicroVMsStream(*ListMicroVMsRequest, MicroVM_ListMicroVMsStreamServer) error
}

// UnimplementedMicroVMServer should be embedded to have forward compatible implementations.
type UnimplementedMicroVMServer struct {
}

func (UnimplementedMicroVMServer) CreateMicroVM(context.Context, *CreateMicroVMRequest) (*CreateMicroVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMicroVM not implemented")
}
func (UnimplementedMicroVMServer) DeleteMicroVM(context.Context, *DeleteMicroVMRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMicroVM not implemented")
}
func (UnimplementedMicroVMServer) GetMicroVM(context.Context, *GetMicroVMRequest) (*GetMicroVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMicroVM not implemented")
}
func (UnimplementedMicroVMServer) ListMicroVMs(context.Context, *ListMicroVMsRequest) (*ListMicroVMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMicroVMs not implemented")
}
func (UnimplementedMicroVMServer) ListMicroVMsStream(*ListMicroVMsRequest, MicroVM_ListMicroVMsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListMicroVMsStream not implemented")
}

// UnsafeMicroVMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MicroVMServer will
// result in compilation errors.
type UnsafeMicroVMServer interface {
	mustEmbedUnimplementedMicroVMServer()
}

func RegisterMicroVMServer(s grpc.ServiceRegistrar, srv MicroVMServer) {
	s.RegisterService(&MicroVM_ServiceDesc, srv)
}

func _MicroVM_CreateMicroVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMicroVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroVMServer).CreateMicroVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microvm.services.api.v1alpha1.MicroVM/CreateMicroVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroVMServer).CreateMicroVM(ctx, req.(*CreateMicroVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroVM_DeleteMicroVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMicroVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroVMServer).DeleteMicroVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microvm.services.api.v1alpha1.MicroVM/DeleteMicroVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroVMServer).DeleteMicroVM(ctx, req.(*DeleteMicroVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroVM_GetMicroVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMicroVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroVMServer).GetMicroVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microvm.services.api.v1alpha1.MicroVM/GetMicroVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroVMServer).GetMicroVM(ctx, req.(*GetMicroVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroVM_ListMicroVMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMicroVMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroVMServer).ListMicroVMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microvm.services.api.v1alpha1.MicroVM/ListMicroVMs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroVMServer).ListMicroVMs(ctx, req.(*ListMicroVMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroVM_ListMicroVMsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListMicroVMsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MicroVMServer).ListMicroVMsStream(m, &microVMListMicroVMsStreamServer{stream})
}

type MicroVM_ListMicroVMsStreamServer interface {
	Send(*ListMessage) error
	grpc.ServerStream
}

type microVMListMicroVMsStreamServer struct {
	grpc.ServerStream
}

func (x *microVMListMicroVMsStreamServer) Send(m *ListMessage) error {
	return x.ServerStream.SendMsg(m)
}

// MicroVM_ServiceDesc is the grpc.ServiceDesc for MicroVM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MicroVM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microvm.services.api.v1alpha1.MicroVM",
	HandlerType: (*MicroVMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMicroVM",
			Handler:    _MicroVM_CreateMicroVM_Handler,
		},
		{
			MethodName: "DeleteMicroVM",
			Handler:    _MicroVM_DeleteMicroVM_Handler,
		},
		{
			MethodName: "GetMicroVM",
			Handler:    _MicroVM_GetMicroVM_Handler,
		},
		{
			MethodName: "ListMicroVMs",
			Handler:    _MicroVM_ListMicroVMs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListMicroVMsStream",
			Handler:       _MicroVM_ListMicroVMsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/microvm/v1alpha1/microvms.proto",
}
