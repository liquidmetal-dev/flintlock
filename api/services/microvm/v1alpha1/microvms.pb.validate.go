// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/microvm/v1alpha1/microvms.proto

package v1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateMicroVMRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateMicroVMRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMicrovm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMicroVMRequestValidationError{
				field:  "Microvm",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetMetadata() {
		_ = val

		// no validation rules for Metadata[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMicroVMRequestValidationError{
					field:  fmt.Sprintf("Metadata[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CreateMicroVMRequestValidationError is the validation error returned by
// CreateMicroVMRequest.Validate if the designated constraints aren't met.
type CreateMicroVMRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMicroVMRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMicroVMRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMicroVMRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMicroVMRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMicroVMRequestValidationError) ErrorName() string {
	return "CreateMicroVMRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMicroVMRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMicroVMRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMicroVMRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMicroVMRequestValidationError{}

// Validate checks the field values on CreateMicroVMResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateMicroVMResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMicrovm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMicroVMResponseValidationError{
				field:  "Microvm",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateMicroVMResponseValidationError is the validation error returned by
// CreateMicroVMResponse.Validate if the designated constraints aren't met.
type CreateMicroVMResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMicroVMResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMicroVMResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMicroVMResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMicroVMResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMicroVMResponseValidationError) ErrorName() string {
	return "CreateMicroVMResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMicroVMResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMicroVMResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMicroVMResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMicroVMResponseValidationError{}

// Validate checks the field values on DeleteMicroVMRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteMicroVMRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Namespace

	return nil
}

// DeleteMicroVMRequestValidationError is the validation error returned by
// DeleteMicroVMRequest.Validate if the designated constraints aren't met.
type DeleteMicroVMRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMicroVMRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMicroVMRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMicroVMRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMicroVMRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMicroVMRequestValidationError) ErrorName() string {
	return "DeleteMicroVMRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMicroVMRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMicroVMRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMicroVMRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMicroVMRequestValidationError{}

// Validate checks the field values on UpdateMicroVMRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateMicroVMRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMicrovm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMicroVMRequestValidationError{
				field:  "Microvm",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMicroVMRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateMicroVMRequestValidationError is the validation error returned by
// UpdateMicroVMRequest.Validate if the designated constraints aren't met.
type UpdateMicroVMRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMicroVMRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMicroVMRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMicroVMRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMicroVMRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMicroVMRequestValidationError) ErrorName() string {
	return "UpdateMicroVMRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMicroVMRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMicroVMRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMicroVMRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMicroVMRequestValidationError{}

// Validate checks the field values on UpdateMicroVMResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateMicroVMResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMicrovm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMicroVMResponseValidationError{
				field:  "Microvm",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateMicroVMResponseValidationError is the validation error returned by
// UpdateMicroVMResponse.Validate if the designated constraints aren't met.
type UpdateMicroVMResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMicroVMResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMicroVMResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMicroVMResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMicroVMResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMicroVMResponseValidationError) ErrorName() string {
	return "UpdateMicroVMResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMicroVMResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMicroVMResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMicroVMResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMicroVMResponseValidationError{}

// Validate checks the field values on GetMicroVMRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetMicroVMRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Namespace

	return nil
}

// GetMicroVMRequestValidationError is the validation error returned by
// GetMicroVMRequest.Validate if the designated constraints aren't met.
type GetMicroVMRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMicroVMRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMicroVMRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMicroVMRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMicroVMRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMicroVMRequestValidationError) ErrorName() string {
	return "GetMicroVMRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMicroVMRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMicroVMRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMicroVMRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMicroVMRequestValidationError{}

// Validate checks the field values on GetMicroVMResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMicroVMResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMicrovm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMicroVMResponseValidationError{
				field:  "Microvm",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMicroVMResponseValidationError is the validation error returned by
// GetMicroVMResponse.Validate if the designated constraints aren't met.
type GetMicroVMResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMicroVMResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMicroVMResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMicroVMResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMicroVMResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMicroVMResponseValidationError) ErrorName() string {
	return "GetMicroVMResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMicroVMResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMicroVMResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMicroVMResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMicroVMResponseValidationError{}

// Validate checks the field values on ListMicroVMsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMicroVMsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Namespace

	return nil
}

// ListMicroVMsRequestValidationError is the validation error returned by
// ListMicroVMsRequest.Validate if the designated constraints aren't met.
type ListMicroVMsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMicroVMsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMicroVMsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMicroVMsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMicroVMsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMicroVMsRequestValidationError) ErrorName() string {
	return "ListMicroVMsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMicroVMsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMicroVMsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMicroVMsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMicroVMsRequestValidationError{}

// Validate checks the field values on ListMicroVMsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMicroVMsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMicrovm() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMicroVMsResponseValidationError{
					field:  fmt.Sprintf("Microvm[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMicroVMsResponseValidationError is the validation error returned by
// ListMicroVMsResponse.Validate if the designated constraints aren't met.
type ListMicroVMsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMicroVMsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMicroVMsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMicroVMsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMicroVMsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMicroVMsResponseValidationError) ErrorName() string {
	return "ListMicroVMsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMicroVMsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMicroVMsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMicroVMsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMicroVMsResponseValidationError{}

// Validate checks the field values on ListMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListMessage) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMicrovm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMessageValidationError{
				field:  "Microvm",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListMessageValidationError is the validation error returned by
// ListMessage.Validate if the designated constraints aren't met.
type ListMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMessageValidationError) ErrorName() string { return "ListMessageValidationError" }

// Error satisfies the builtin error interface
func (e ListMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMessageValidationError{}
