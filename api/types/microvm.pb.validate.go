// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: types/microvm.proto

package types

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on MicroVMSpec with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MicroVMSpec) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Namespace

	// no validation rules for Labels

	// no validation rules for Vcpu

	// no validation rules for MemoryInMb

	if v, ok := interface{}(m.GetKernel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MicroVMSpecValidationError{
				field:  "Kernel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetVolumes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MicroVMSpecValidationError{
					field:  fmt.Sprintf("Volumes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetInterfaces() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MicroVMSpecValidationError{
					field:  fmt.Sprintf("Interfaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Metadata

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MicroVMSpecValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MicroVMSpecValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MicroVMSpecValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.XInitrd.(type) {

	case *MicroVMSpec_Initrd:

		if v, ok := interface{}(m.GetInitrd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MicroVMSpecValidationError{
					field:  "Initrd",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MicroVMSpecValidationError is the validation error returned by
// MicroVMSpec.Validate if the designated constraints aren't met.
type MicroVMSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MicroVMSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MicroVMSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MicroVMSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MicroVMSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MicroVMSpecValidationError) ErrorName() string { return "MicroVMSpecValidationError" }

// Error satisfies the builtin error interface
func (e MicroVMSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMicroVMSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MicroVMSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MicroVMSpecValidationError{}

// Validate checks the field values on Kernel with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Kernel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Image

	// no validation rules for Cmdline

	// no validation rules for AddNetworkConfig

	switch m.XFilename.(type) {

	case *Kernel_Filename:
		// no validation rules for Filename

	}

	return nil
}

// KernelValidationError is the validation error returned by Kernel.Validate if
// the designated constraints aren't met.
type KernelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KernelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KernelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KernelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KernelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KernelValidationError) ErrorName() string { return "KernelValidationError" }

// Error satisfies the builtin error interface
func (e KernelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKernel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KernelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KernelValidationError{}

// Validate checks the field values on Initrd with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Initrd) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Image

	switch m.XFilename.(type) {

	case *Initrd_Filename:
		// no validation rules for Filename

	}

	return nil
}

// InitrdValidationError is the validation error returned by Initrd.Validate if
// the designated constraints aren't met.
type InitrdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitrdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitrdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitrdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitrdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitrdValidationError) ErrorName() string { return "InitrdValidationError" }

// Error satisfies the builtin error interface
func (e InitrdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitrd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitrdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitrdValidationError{}

// Validate checks the field values on NetworkInterface with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *NetworkInterface) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GuestDeviceName

	// no validation rules for Type

	// no validation rules for AllowMetadataReq

	switch m.XGuestMac.(type) {

	case *NetworkInterface_GuestMac:
		// no validation rules for GuestMac

	}

	switch m.XAddress.(type) {

	case *NetworkInterface_Address:
		// no validation rules for Address

	}

	return nil
}

// NetworkInterfaceValidationError is the validation error returned by
// NetworkInterface.Validate if the designated constraints aren't met.
type NetworkInterfaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkInterfaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkInterfaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkInterfaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkInterfaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkInterfaceValidationError) ErrorName() string { return "NetworkInterfaceValidationError" }

// Error satisfies the builtin error interface
func (e NetworkInterfaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkInterface.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkInterfaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkInterfaceValidationError{}

// Validate checks the field values on Volume with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Volume) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for IsRoot

	// no validation rules for IsReadOnly

	// no validation rules for MountPoint

	if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VolumeValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.XPartitionId.(type) {

	case *Volume_PartitionId:
		// no validation rules for PartitionId

	}

	switch m.XSizeInMb.(type) {

	case *Volume_SizeInMb:
		// no validation rules for SizeInMb

	}

	return nil
}

// VolumeValidationError is the validation error returned by Volume.Validate if
// the designated constraints aren't met.
type VolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VolumeValidationError) ErrorName() string { return "VolumeValidationError" }

// Error satisfies the builtin error interface
func (e VolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VolumeValidationError{}

// Validate checks the field values on VolumeSource with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *VolumeSource) Validate() error {
	if m == nil {
		return nil
	}

	switch m.XContainerSource.(type) {

	case *VolumeSource_ContainerSource:
		// no validation rules for ContainerSource

	}

	return nil
}

// VolumeSourceValidationError is the validation error returned by
// VolumeSource.Validate if the designated constraints aren't met.
type VolumeSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VolumeSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VolumeSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VolumeSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VolumeSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VolumeSourceValidationError) ErrorName() string { return "VolumeSourceValidationError" }

// Error satisfies the builtin error interface
func (e VolumeSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolumeSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VolumeSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VolumeSourceValidationError{}

// Validate checks the field values on ContainerVolumeSource with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ContainerVolumeSource) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Image

	return nil
}

// ContainerVolumeSourceValidationError is the validation error returned by
// ContainerVolumeSource.Validate if the designated constraints aren't met.
type ContainerVolumeSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerVolumeSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerVolumeSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerVolumeSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerVolumeSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerVolumeSourceValidationError) ErrorName() string {
	return "ContainerVolumeSourceValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerVolumeSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerVolumeSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerVolumeSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerVolumeSourceValidationError{}
