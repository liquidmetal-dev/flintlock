// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: types/microvm.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkInterface_IfaceType int32

const (
	// MACVTAP represents a network interface that is macvtap.
	NetworkInterface_MACVTAP NetworkInterface_IfaceType = 0
	// TAP represents a network interface that is a tap.
	NetworkInterface_TAP NetworkInterface_IfaceType = 1
)

// Enum value maps for NetworkInterface_IfaceType.
var (
	NetworkInterface_IfaceType_name = map[int32]string{
		0: "MACVTAP",
		1: "TAP",
	}
	NetworkInterface_IfaceType_value = map[string]int32{
		"MACVTAP": 0,
		"TAP":     1,
	}
)

func (x NetworkInterface_IfaceType) Enum() *NetworkInterface_IfaceType {
	p := new(NetworkInterface_IfaceType)
	*p = x
	return p
}

func (x NetworkInterface_IfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkInterface_IfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_microvm_proto_enumTypes[0].Descriptor()
}

func (NetworkInterface_IfaceType) Type() protoreflect.EnumType {
	return &file_types_microvm_proto_enumTypes[0]
}

func (x NetworkInterface_IfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkInterface_IfaceType.Descriptor instead.
func (NetworkInterface_IfaceType) EnumDescriptor() ([]byte, []int) {
	return file_types_microvm_proto_rawDescGZIP(), []int{4, 0}
}

type MicroVMStatus_MicroVMState int32

const (
	MicroVMStatus_PENDING  MicroVMStatus_MicroVMState = 0
	MicroVMStatus_CREATED  MicroVMStatus_MicroVMState = 1
	MicroVMStatus_FAILED   MicroVMStatus_MicroVMState = 2
	MicroVMStatus_DELETING MicroVMStatus_MicroVMState = 3
)

// Enum value maps for MicroVMStatus_MicroVMState.
var (
	MicroVMStatus_MicroVMState_name = map[int32]string{
		0: "PENDING",
		1: "CREATED",
		2: "FAILED",
		3: "DELETING",
	}
	MicroVMStatus_MicroVMState_value = map[string]int32{
		"PENDING":  0,
		"CREATED":  1,
		"FAILED":   2,
		"DELETING": 3,
	}
)

func (x MicroVMStatus_MicroVMState) Enum() *MicroVMStatus_MicroVMState {
	p := new(MicroVMStatus_MicroVMState)
	*p = x
	return p
}

func (x MicroVMStatus_MicroVMState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MicroVMStatus_MicroVMState) Descriptor() protoreflect.EnumDescriptor {
	return file_types_microvm_proto_enumTypes[1].Descriptor()
}

func (MicroVMStatus_MicroVMState) Type() protoreflect.EnumType {
	return &file_types_microvm_proto_enumTypes[1]
}

func (x MicroVMStatus_MicroVMState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MicroVMStatus_MicroVMState.Descriptor instead.
func (MicroVMStatus_MicroVMState) EnumDescriptor() ([]byte, []int) {
	return file_types_microvm_proto_rawDescGZIP(), []int{10, 0}
}

type Mount_MountType int32

const (
	Mount_DEV      Mount_MountType = 0
	Mount_HOSTPATH Mount_MountType = 1
)

// Enum value maps for Mount_MountType.
var (
	Mount_MountType_name = map[int32]string{
		0: "DEV",
		1: "HOSTPATH",
	}
	Mount_MountType_value = map[string]int32{
		"DEV":      0,
		"HOSTPATH": 1,
	}
)

func (x Mount_MountType) Enum() *Mount_MountType {
	p := new(Mount_MountType)
	*p = x
	return p
}

func (x Mount_MountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mount_MountType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_microvm_proto_enumTypes[2].Descriptor()
}

func (Mount_MountType) Type() protoreflect.EnumType {
	return &file_types_microvm_proto_enumTypes[2]
}

func (x Mount_MountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mount_MountType.Descriptor instead.
func (Mount_MountType) EnumDescriptor() ([]byte, []int) {
	return file_types_microvm_proto_rawDescGZIP(), []int{12, 0}
}

// MicroVM represents a microvm machine that is created via a provider.
type MicroVM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Spec is the specification of the microvm.
	Spec *MicroVMSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status is the runtime status of the microvm.
	Status *MicroVMStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *MicroVM) Reset() {
	*x = MicroVM{}
	mi := &file_types_microvm_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MicroVM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicroVM) ProtoMessage() {}

func (x *MicroVM) ProtoReflect() protoreflect.Message {
	mi := &file_types_microvm_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicroVM.ProtoReflect.Descriptor instead.
func (*MicroVM) Descriptor() ([]byte, []int) {
	return file_types_microvm_proto_rawDescGZIP(), []int{0}
}

func (x *MicroVM) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *MicroVM) GetSpec() *MicroVMSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *MicroVM) GetStatus() *MicroVMStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// MicroVMSpec represents the specification for a microvm.
type MicroVMSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the identifier of the microvm.
	// If this empty at creation time a ID will be automatically generated.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Namespace is the name of the namespace the microvm belongs to.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Labels allows you to include extra data for the microvms.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// VCPU specifies how many vcpu the machine will be allocated.
	Vcpu int32 `protobuf:"varint,4,opt,name=vcpu,proto3" json:"vcpu,omitempty"`
	// MemoryInMb is the amount of memory in megabytes that the machine will be allocated.
	MemoryInMb int32 `protobuf:"varint,5,opt,name=memory_in_mb,json=memoryInMb,proto3" json:"memory_in_mb,omitempty"`
	// Kernel is the details of the kernel to use .
	Kernel *Kernel `protobuf:"bytes,6,opt,name=kernel,proto3" json:"kernel,omitempty"`
	// Initrd is the optional details of the initial ramdisk.
	Initrd *Initrd `protobuf:"bytes,7,opt,name=initrd,proto3,oneof" json:"initrd,omitempty"`
	// RootVolume specifies the root volume mount for the MicroVM.
	RootVolume *Volume `protobuf:"bytes,8,opt,name=root_volume,json=rootVolume,proto3" json:"root_volume,omitempty"`
	// AdditionalVolumes specifies the volumes to be attached to the microvm.
	AdditionalVolumes []*Volume `protobuf:"bytes,9,rep,name=additional_volumes,json=additionalVolumes,proto3" json:"additional_volumes,omitempty"`
	// Interfaces specifies the network interfaces to be attached to the microvm.
	// Device names on the guest machine are determined by the order defined in
	// the list starting from eth1, eth2, ..., ethN.
	Interfaces []*NetworkInterface `protobuf:"bytes,10,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	// Metadata allows you to specify data to be added to the metadata service. The key is the name
	// of the metadata item and the value is the base64 encoded contents of the metadata.
	Metadata map[string]string `protobuf:"bytes,11,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// CreatedAt indicates the time the microvm was created at.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// UpdatedAt indicates the time the microvm was last updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// DeletedAt indicates the time the microvm was marked as deleted.
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// UID is a globally unique identifier of the microvm.
	Uid *string `protobuf:"bytes,15,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	// Provider allows you to specify the name of the microvm provider to use. If this isn't supplied
	// then the default provider will be used.
	Provider *string `protobuf:"bytes,16,opt,name=provider,proto3,oneof" json:"provider,omitempty"`
}

func (x *MicroVMSpec) Reset() {
	*x = MicroVMSpec{}
	mi := &file_types_microvm_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MicroVMSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicroVMSpec) ProtoMessage() {}

func (x *MicroVMSpec) ProtoReflect() protoreflect.Message {
	mi := &file_types_microvm_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicroVMSpec.ProtoReflect.Descriptor instead.
func (*MicroVMSpec) Descriptor() ([]byte, []int) {
	return file_types_microvm_proto_rawDescGZIP(), []int{1}
}

func (x *MicroVMSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MicroVMSpec) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *MicroVMSpec) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MicroVMSpec) GetVcpu() int32 {
	if x != nil {
		return x.Vcpu
	}
	return 0
}

func (x *MicroVMSpec) GetMemoryInMb() int32 {
	if x != nil {
		return x.MemoryInMb
	}
	return 0
}

func (x *MicroVMSpec) GetKernel() *Kernel {
	if x != nil {
		return x.Kernel
	}
	return nil
}

func (x *MicroVMSpec) GetInitrd() *Initrd {
	if x != nil {
		return x.Initrd
	}
	return nil
}

func (x *MicroVMSpec) GetRootVolume() *Volume {
	if x != nil {
		return x.RootVolume
	}
	return nil
}

func (x *MicroVMSpec) GetAdditionalVolumes() []*Volume {
	if x != nil {
		return x.AdditionalVolumes
	}
	return nil
}

func (x *MicroVMSpec) GetInterfaces() []*NetworkInterface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *MicroVMSpec) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *MicroVMSpec) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MicroVMSpec) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *MicroVMSpec) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *MicroVMSpec) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *MicroVMSpec) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

// Kernel represents the configuration for a kernel.
type Kernel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Image is the container image to use.
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// Cmdline is the additional kernel command line args. Each provider has its
	// own recommended list, they will be used automatically. This field is for
	// additional values.
	Cmdline map[string]string `protobuf:"bytes,2,rep,name=cmdline,proto3" json:"cmdline,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Filename is used to specify the name of the kernel file
	// in the Image.
	Filename *string `protobuf:"bytes,3,opt,name=filename,proto3,oneof" json:"filename,omitempty"`
	// AddNetworkConfig if set to true indicates that the network-config kernel argument should be generated.
	AddNetworkConfig bool `protobuf:"varint,4,opt,name=add_network_config,json=addNetworkConfig,proto3" json:"add_network_config,omitempty"`
}

func (x *Kernel) Reset() {
	*x = Kernel{}
	mi := &file_types_microvm_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Kernel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kernel) ProtoMessage() {}

func (x *Kernel) ProtoReflect() protoreflect.Message {
	mi := &file_types_microvm_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kernel.ProtoReflect.Descriptor instead.
func (*Kernel) Descriptor() ([]byte, []int) {
	return file_types_microvm_proto_rawDescGZIP(), []int{2}
}

func (x *Kernel) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Kernel) GetCmdline() map[string]string {
	if x != nil {
		return x.Cmdline
	}
	return nil
}

func (x *Kernel) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *Kernel) GetAddNetworkConfig() bool {
	if x != nil {
		return x.AddNetworkConfig
	}
	return false
}

// Initrd represents the configuration for the initial ramdisk.
type Initrd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Image is the container image to use.
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// Filename is used to specify the name of the kernel file
	// in the Image. Defaults to initrd
	Filename *string `protobuf:"bytes,2,opt,name=filename,proto3,oneof" json:"filename,omitempty"`
}

func (x *Initrd) Reset() {
	*x = Initrd{}
	mi := &file_types_microvm_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Initrd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Initrd) ProtoMessage() {}

func (x *Initrd) ProtoReflect() protoreflect.Message {
	mi := &file_types_microvm_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Initrd.ProtoReflect.Descriptor instead.
func (*Initrd) Descriptor() ([]byte, []int) {
	return file_types_microvm_proto_rawDescGZIP(), []int{3}
}

func (x *Initrd) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Initrd) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

type NetworkInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DeviceID is the ID of the interface. There is no relation between the ID
	// and the name of the interface device on the quest machine.
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// IfaceType specifies the type of network interface to create for use by the guest.
	Type NetworkInterface_IfaceType `protobuf:"varint,2,opt,name=type,proto3,enum=flintlock.types.NetworkInterface_IfaceType" json:"type,omitempty"`
	// GuestMAC allows the specifying of a specifi MAC address to use for the interface. If
	// not supplied a autogenerated MAC address will be used.
	GuestMac *string `protobuf:"bytes,4,opt,name=guest_mac,json=guestMac,proto3,oneof" json:"guest_mac,omitempty"`
	// Address is an optional static IP address to manually assign to this interface.
	// If not supplied then DHCP will be used.
	Address *StaticAddress `protobuf:"bytes,5,opt,name=address,proto3,oneof" json:"address,omitempty"`
	// Overrides is optional overrides applicable for network configuration.
	Overrides *NetworkOverrides `protobuf:"bytes,6,opt,name=overrides,proto3,oneof" json:"overrides,omitempty"`
}

func (x *NetworkInterface) Reset() {
	*x = NetworkInterface{}
	mi := &file_types_microvm_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterface) ProtoMessage() {}

func (x *NetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_types_microvm_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterface.ProtoReflect.Descriptor instead.
func (*NetworkInterface) Descriptor() ([]byte, []int) {
	return file_types_microvm_proto_rawDescGZIP(), []int{4}
}

func (x *NetworkInterface) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *NetworkInterface) GetType() NetworkInterface_IfaceType {
	if x != nil {
		return x.Type
	}
	return NetworkInterface_MACVTAP
}

func (x *NetworkInterface) GetGuestMac() string {
	if x != nil && x.GuestMac != nil {
		return *x.GuestMac
	}
	return ""
}

func (x *NetworkInterface) GetAddress() *StaticAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *NetworkInterface) GetOverrides() *NetworkOverrides {
	if x != nil {
		return x.Overrides
	}
	return nil
}

// StaticAddress represents a static IPv4 or IPv6 address.
type StaticAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address is the static IP address (IPv4 or IPv6) to assign to this interface.
	// Must be CIDR notation.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Gateway is used to optionaly set the default gateway for IPv4 or IPv6.
	Gateway *string `protobuf:"bytes,2,opt,name=gateway,proto3,oneof" json:"gateway,omitempty"`
	// Nameservers allows you to optionaly specify nameservers for the interface.
	Nameservers []string `protobuf:"bytes,3,rep,name=nameservers,proto3" json:"nameservers,omitempty"`
}

func (x *StaticAddress) Reset() {
	*x = StaticAddress{}
	mi := &file_types_microvm_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticAddress) ProtoMessage() {}

func (x *StaticAddress) ProtoReflect() protoreflect.Message {
	mi := &file_types_microvm_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticAddress.ProtoReflect.Descriptor instead.
func (*StaticAddress) Descriptor() ([]byte, []int) {
	return file_types_microvm_proto_rawDescGZIP(), []int{5}
}

func (x *StaticAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *StaticAddress) GetGateway() string {
	if x != nil && x.Gateway != nil {
		return *x.Gateway
	}
	return ""
}

func (x *StaticAddress) GetNameservers() []string {
	if x != nil {
		return x.Nameservers
	}
	return nil
}

// Volume represents the configuration for a volume to be attached to a microvm.
type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the uinique identifier of the volume.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// IsReadOnly specifies that the volume is to be mounted readonly.
	IsReadOnly bool `protobuf:"varint,2,opt,name=is_read_only,json=isReadOnly,proto3" json:"is_read_only,omitempty"`
	// MountPoint allows you to optionally specify a mount point for the volume. This only
	// applied to additional volumes and it will use cloud-init to mount the volumes.
	MountPoint *string `protobuf:"bytes,3,opt,name=mount_point,json=mountPoint,proto3,oneof" json:"mount_point,omitempty"`
	// Source is where the volume will be sourced from.
	Source *VolumeSource `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// PartitionID is the uuid of the boot partition.
	PartitionId *string `protobuf:"bytes,5,opt,name=partition_id,json=partitionId,proto3,oneof" json:"partition_id,omitempty"`
	// Size is the size to resize this volume to.
	SizeInMb *int32 `protobuf:"varint,6,opt,name=size_in_mb,json=sizeInMb,proto3,oneof" json:"size_in_mb,omitempty"` // TODO: add rate limiting
}

func (x *Volume) Reset() {
	*x = Volume{}
	mi := &file_types_microvm_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_types_microvm_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_types_microvm_proto_rawDescGZIP(), []int{6}
}

func (x *Volume) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Volume) GetIsReadOnly() bool {
	if x != nil {
		return x.IsReadOnly
	}
	return false
}

func (x *Volume) GetMountPoint() string {
	if x != nil && x.MountPoint != nil {
		return *x.MountPoint
	}
	return ""
}

func (x *Volume) GetSource() *VolumeSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Volume) GetPartitionId() string {
	if x != nil && x.PartitionId != nil {
		return *x.PartitionId
	}
	return ""
}

func (x *Volume) GetSizeInMb() int32 {
	if x != nil && x.SizeInMb != nil {
		return *x.SizeInMb
	}
	return 0
}

// VolumeSource is the source of a volume. Based loosely on the volumes in Kubernetes Pod specs.
type VolumeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Container is used to specify a source of a volume as a OCI container.
	ContainerSource *string `protobuf:"bytes,1,opt,name=container_source,json=containerSource,proto3,oneof" json:"container_source,omitempty"`
	// Used for the virtiofs source path
	VirtiofsSource *string `protobuf:"bytes,2,opt,name=virtiofs_source,json=virtiofsSource,proto3,oneof" json:"virtiofs_source,omitempty"`
}

func (x *VolumeSource) Reset() {
	*x = VolumeSource{}
	mi := &file_types_microvm_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSource) ProtoMessage() {}

func (x *VolumeSource) ProtoReflect() protoreflect.Message {
	mi := &file_types_microvm_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSource.ProtoReflect.Descriptor instead.
func (*VolumeSource) Descriptor() ([]byte, []int) {
	return file_types_microvm_proto_rawDescGZIP(), []int{7}
}

func (x *VolumeSource) GetContainerSource() string {
	if x != nil && x.ContainerSource != nil {
		return *x.ContainerSource
	}
	return ""
}

func (x *VolumeSource) GetVirtiofsSource() string {
	if x != nil && x.VirtiofsSource != nil {
		return *x.VirtiofsSource
	}
	return ""
}

// VirtioFSVolumeSource represents the details of a volume coming from a OCI image.
type VirtioFSVolumeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path on the host machine to pass through.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *VirtioFSVolumeSource) Reset() {
	*x = VirtioFSVolumeSource{}
	mi := &file_types_microvm_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtioFSVolumeSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtioFSVolumeSource) ProtoMessage() {}

func (x *VirtioFSVolumeSource) ProtoReflect() protoreflect.Message {
	mi := &file_types_microvm_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtioFSVolumeSource.ProtoReflect.Descriptor instead.
func (*VirtioFSVolumeSource) Descriptor() ([]byte, []int) {
	return file_types_microvm_proto_rawDescGZIP(), []int{8}
}

func (x *VirtioFSVolumeSource) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// ContainerVolumeSource represents the details of a volume coming from a OCI image.
type ContainerVolumeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Image specifies the conatiner image to use for the volume.
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *ContainerVolumeSource) Reset() {
	*x = ContainerVolumeSource{}
	mi := &file_types_microvm_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerVolumeSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerVolumeSource) ProtoMessage() {}

func (x *ContainerVolumeSource) ProtoReflect() protoreflect.Message {
	mi := &file_types_microvm_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerVolumeSource.ProtoReflect.Descriptor instead.
func (*ContainerVolumeSource) Descriptor() ([]byte, []int) {
	return file_types_microvm_proto_rawDescGZIP(), []int{9}
}

func (x *ContainerVolumeSource) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

// MicroVMStatus contains the runtime status of the microvm.
type MicroVMStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// State stores information about the last known state of the vm and the spec.
	State MicroVMStatus_MicroVMState `protobuf:"varint,1,opt,name=state,proto3,enum=flintlock.types.MicroVMStatus_MicroVMState" json:"state,omitempty"`
	// Volumes holds the status of the volumes.
	Volumes map[string]*VolumeStatus `protobuf:"bytes,2,rep,name=volumes,proto3" json:"volumes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// KernelMount holds the status of the kernel mount point.
	KernelMount *Mount `protobuf:"bytes,3,opt,name=kernel_mount,json=kernelMount,proto3" json:"kernel_mount,omitempty"`
	// InitrdMount holds the status of the initrd mount point.
	InitrdMount *Mount `protobuf:"bytes,4,opt,name=initrd_mount,json=initrdMount,proto3" json:"initrd_mount,omitempty"`
	// NetworkInterfaces holds the status of the network interfaces.
	NetworkInterfaces map[string]*NetworkInterfaceStatus `protobuf:"bytes,5,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Retry is a counter about how many times we retried to reconcile.
	Retry int32 `protobuf:"varint,6,opt,name=retry,proto3" json:"retry,omitempty"`
}

func (x *MicroVMStatus) Reset() {
	*x = MicroVMStatus{}
	mi := &file_types_microvm_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MicroVMStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicroVMStatus) ProtoMessage() {}

func (x *MicroVMStatus) ProtoReflect() protoreflect.Message {
	mi := &file_types_microvm_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicroVMStatus.ProtoReflect.Descriptor instead.
func (*MicroVMStatus) Descriptor() ([]byte, []int) {
	return file_types_microvm_proto_rawDescGZIP(), []int{10}
}

func (x *MicroVMStatus) GetState() MicroVMStatus_MicroVMState {
	if x != nil {
		return x.State
	}
	return MicroVMStatus_PENDING
}

func (x *MicroVMStatus) GetVolumes() map[string]*VolumeStatus {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *MicroVMStatus) GetKernelMount() *Mount {
	if x != nil {
		return x.KernelMount
	}
	return nil
}

func (x *MicroVMStatus) GetInitrdMount() *Mount {
	if x != nil {
		return x.InitrdMount
	}
	return nil
}

func (x *MicroVMStatus) GetNetworkInterfaces() map[string]*NetworkInterfaceStatus {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

func (x *MicroVMStatus) GetRetry() int32 {
	if x != nil {
		return x.Retry
	}
	return 0
}

type VolumeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mount represents a volume mount point.
	Mount *Mount `protobuf:"bytes,1,opt,name=mount,proto3" json:"mount,omitempty"`
}

func (x *VolumeStatus) Reset() {
	*x = VolumeStatus{}
	mi := &file_types_microvm_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeStatus) ProtoMessage() {}

func (x *VolumeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_types_microvm_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeStatus.ProtoReflect.Descriptor instead.
func (*VolumeStatus) Descriptor() ([]byte, []int) {
	return file_types_microvm_proto_rawDescGZIP(), []int{11}
}

func (x *VolumeStatus) GetMount() *Mount {
	if x != nil {
		return x.Mount
	}
	return nil
}

// Mount represents a volume mount point.
type Mount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type specifies the type of the mount (e.g. device or directory).
	Type Mount_MountType `protobuf:"varint,1,opt,name=type,proto3,enum=flintlock.types.Mount_MountType" json:"type,omitempty"`
	// Source is the location of the mounted volume.
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *Mount) Reset() {
	*x = Mount{}
	mi := &file_types_microvm_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mount) ProtoMessage() {}

func (x *Mount) ProtoReflect() protoreflect.Message {
	mi := &file_types_microvm_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mount.ProtoReflect.Descriptor instead.
func (*Mount) Descriptor() ([]byte, []int) {
	return file_types_microvm_proto_rawDescGZIP(), []int{12}
}

func (x *Mount) GetType() Mount_MountType {
	if x != nil {
		return x.Type
	}
	return Mount_DEV
}

func (x *Mount) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type NetworkInterfaceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HostDeviceName is the name of the network interface used from the host. This will be
	// a tuntap or macvtap interface.
	HostDeviceName string `protobuf:"bytes,1,opt,name=host_device_name,json=hostDeviceName,proto3" json:"host_device_name,omitempty"`
	// Index is the index of the network interface on the host.
	Index int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	// MACAddress is the MAC address of the host interface.
	MacAddress string `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
}

func (x *NetworkInterfaceStatus) Reset() {
	*x = NetworkInterfaceStatus{}
	mi := &file_types_microvm_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInterfaceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterfaceStatus) ProtoMessage() {}

func (x *NetworkInterfaceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_types_microvm_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterfaceStatus.ProtoReflect.Descriptor instead.
func (*NetworkInterfaceStatus) Descriptor() ([]byte, []int) {
	return file_types_microvm_proto_rawDescGZIP(), []int{13}
}

func (x *NetworkInterfaceStatus) GetHostDeviceName() string {
	if x != nil {
		return x.HostDeviceName
	}
	return ""
}

func (x *NetworkInterfaceStatus) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *NetworkInterfaceStatus) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

// NetworkOverrides represents override values for a network interface.
type NetworkOverrides struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BridgeName is the name of the Linux bridge to attach TAP devices to. This overrides
	// any value set at the overall flintlock level.
	BridgeName *string `protobuf:"bytes,1,opt,name=bridge_name,json=bridgeName,proto3,oneof" json:"bridge_name,omitempty"`
}

func (x *NetworkOverrides) Reset() {
	*x = NetworkOverrides{}
	mi := &file_types_microvm_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkOverrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkOverrides) ProtoMessage() {}

func (x *NetworkOverrides) ProtoReflect() protoreflect.Message {
	mi := &file_types_microvm_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkOverrides.ProtoReflect.Descriptor instead.
func (*NetworkOverrides) Descriptor() ([]byte, []int) {
	return file_types_microvm_proto_rawDescGZIP(), []int{14}
}

func (x *NetworkOverrides) GetBridgeName() string {
	if x != nil && x.BridgeName != nil {
		return *x.BridgeName
	}
	return ""
}

var File_types_microvm_proto protoreflect.FileDescriptor

var file_types_microvm_proto_rawDesc = []byte{
	0x0a, 0x13, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x76, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x66, 0x6c, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x07, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x56, 0x4d, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c,
	0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x56, 0x4d, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12,
	0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x56, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa8, 0x07, 0x0a, 0x0b, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x56, 0x4d, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x56, 0x4d, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x63, 0x70, 0x75, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x63, 0x70, 0x75, 0x12, 0x20, 0x0a, 0x0c, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x4d, 0x62, 0x12, 0x2f, 0x0a,
	0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x66, 0x6c, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12, 0x34,
	0x0a, 0x06, 0x69, 0x6e, 0x69, 0x74, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x69, 0x74, 0x72, 0x64, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x69, 0x74, 0x72,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x69, 0x6e,
	0x74, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x46,
	0x0a, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x69,
	0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x69,
	0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x66, 0x6c,
	0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x56, 0x4d, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x03, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x72, 0x64, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x75, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x22, 0xf6, 0x01, 0x0a, 0x06, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6d, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6d,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x61, 0x64, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6d, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x06, 0x49,
	0x6e, 0x69, 0x74, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe2, 0x02, 0x0a, 0x10, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x66, 0x6c, 0x69, 0x6e,
	0x74, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x09,
	0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x67, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48,
	0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a,
	0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x48, 0x02, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x22, 0x21, 0x0a, 0x09, 0x49, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x43, 0x56, 0x54, 0x41, 0x50, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x54, 0x41, 0x50, 0x10, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x6d, 0x61, 0x63, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x22, 0x76,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22, 0x92, 0x02, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x69, 0x6e,
	0x74, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08,
	0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x4d, 0x62, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x62, 0x22, 0x95, 0x01, 0x0a, 0x0c,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f,
	0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x66, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x66,
	0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x66, 0x73, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x56, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x46, 0x53, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22,
	0x2d, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x99,
	0x05, 0x0a, 0x0d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x56, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x56, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x56, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x56, 0x4d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x6b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x72, 0x64, 0x5f,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c,
	0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x72, 0x64, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x64, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66,
	0x6c, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x56, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x1a, 0x59, 0x0a, 0x0c,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x66, 0x6c, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6d, 0x0a, 0x16, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x42, 0x0a, 0x0c, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x56,
	0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x22, 0x3c, 0x0a, 0x0c, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69, 0x6e,
	0x74, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x79, 0x0a, 0x05, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x66, 0x6c, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x22, 0x0a, 0x09, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x44, 0x45, 0x56, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x4f, 0x53, 0x54, 0x50, 0x41, 0x54,
	0x48, 0x10, 0x01, 0x22, 0x79, 0x0a, 0x16, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x48,
	0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x66, 0x6c, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x6b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x3b, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_microvm_proto_rawDescOnce sync.Once
	file_types_microvm_proto_rawDescData = file_types_microvm_proto_rawDesc
)

func file_types_microvm_proto_rawDescGZIP() []byte {
	file_types_microvm_proto_rawDescOnce.Do(func() {
		file_types_microvm_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_microvm_proto_rawDescData)
	})
	return file_types_microvm_proto_rawDescData
}

var file_types_microvm_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_types_microvm_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_types_microvm_proto_goTypes = []any{
	(NetworkInterface_IfaceType)(0), // 0: flintlock.types.NetworkInterface.IfaceType
	(MicroVMStatus_MicroVMState)(0), // 1: flintlock.types.MicroVMStatus.MicroVMState
	(Mount_MountType)(0),            // 2: flintlock.types.Mount.MountType
	(*MicroVM)(nil),                 // 3: flintlock.types.MicroVM
	(*MicroVMSpec)(nil),             // 4: flintlock.types.MicroVMSpec
	(*Kernel)(nil),                  // 5: flintlock.types.Kernel
	(*Initrd)(nil),                  // 6: flintlock.types.Initrd
	(*NetworkInterface)(nil),        // 7: flintlock.types.NetworkInterface
	(*StaticAddress)(nil),           // 8: flintlock.types.StaticAddress
	(*Volume)(nil),                  // 9: flintlock.types.Volume
	(*VolumeSource)(nil),            // 10: flintlock.types.VolumeSource
	(*VirtioFSVolumeSource)(nil),    // 11: flintlock.types.VirtioFSVolumeSource
	(*ContainerVolumeSource)(nil),   // 12: flintlock.types.ContainerVolumeSource
	(*MicroVMStatus)(nil),           // 13: flintlock.types.MicroVMStatus
	(*VolumeStatus)(nil),            // 14: flintlock.types.VolumeStatus
	(*Mount)(nil),                   // 15: flintlock.types.Mount
	(*NetworkInterfaceStatus)(nil),  // 16: flintlock.types.NetworkInterfaceStatus
	(*NetworkOverrides)(nil),        // 17: flintlock.types.NetworkOverrides
	nil,                             // 18: flintlock.types.MicroVMSpec.LabelsEntry
	nil,                             // 19: flintlock.types.MicroVMSpec.MetadataEntry
	nil,                             // 20: flintlock.types.Kernel.CmdlineEntry
	nil,                             // 21: flintlock.types.MicroVMStatus.VolumesEntry
	nil,                             // 22: flintlock.types.MicroVMStatus.NetworkInterfacesEntry
	(*timestamppb.Timestamp)(nil),   // 23: google.protobuf.Timestamp
}
var file_types_microvm_proto_depIdxs = []int32{
	4,  // 0: flintlock.types.MicroVM.spec:type_name -> flintlock.types.MicroVMSpec
	13, // 1: flintlock.types.MicroVM.status:type_name -> flintlock.types.MicroVMStatus
	18, // 2: flintlock.types.MicroVMSpec.labels:type_name -> flintlock.types.MicroVMSpec.LabelsEntry
	5,  // 3: flintlock.types.MicroVMSpec.kernel:type_name -> flintlock.types.Kernel
	6,  // 4: flintlock.types.MicroVMSpec.initrd:type_name -> flintlock.types.Initrd
	9,  // 5: flintlock.types.MicroVMSpec.root_volume:type_name -> flintlock.types.Volume
	9,  // 6: flintlock.types.MicroVMSpec.additional_volumes:type_name -> flintlock.types.Volume
	7,  // 7: flintlock.types.MicroVMSpec.interfaces:type_name -> flintlock.types.NetworkInterface
	19, // 8: flintlock.types.MicroVMSpec.metadata:type_name -> flintlock.types.MicroVMSpec.MetadataEntry
	23, // 9: flintlock.types.MicroVMSpec.created_at:type_name -> google.protobuf.Timestamp
	23, // 10: flintlock.types.MicroVMSpec.updated_at:type_name -> google.protobuf.Timestamp
	23, // 11: flintlock.types.MicroVMSpec.deleted_at:type_name -> google.protobuf.Timestamp
	20, // 12: flintlock.types.Kernel.cmdline:type_name -> flintlock.types.Kernel.CmdlineEntry
	0,  // 13: flintlock.types.NetworkInterface.type:type_name -> flintlock.types.NetworkInterface.IfaceType
	8,  // 14: flintlock.types.NetworkInterface.address:type_name -> flintlock.types.StaticAddress
	17, // 15: flintlock.types.NetworkInterface.overrides:type_name -> flintlock.types.NetworkOverrides
	10, // 16: flintlock.types.Volume.source:type_name -> flintlock.types.VolumeSource
	1,  // 17: flintlock.types.MicroVMStatus.state:type_name -> flintlock.types.MicroVMStatus.MicroVMState
	21, // 18: flintlock.types.MicroVMStatus.volumes:type_name -> flintlock.types.MicroVMStatus.VolumesEntry
	15, // 19: flintlock.types.MicroVMStatus.kernel_mount:type_name -> flintlock.types.Mount
	15, // 20: flintlock.types.MicroVMStatus.initrd_mount:type_name -> flintlock.types.Mount
	22, // 21: flintlock.types.MicroVMStatus.network_interfaces:type_name -> flintlock.types.MicroVMStatus.NetworkInterfacesEntry
	15, // 22: flintlock.types.VolumeStatus.mount:type_name -> flintlock.types.Mount
	2,  // 23: flintlock.types.Mount.type:type_name -> flintlock.types.Mount.MountType
	14, // 24: flintlock.types.MicroVMStatus.VolumesEntry.value:type_name -> flintlock.types.VolumeStatus
	16, // 25: flintlock.types.MicroVMStatus.NetworkInterfacesEntry.value:type_name -> flintlock.types.NetworkInterfaceStatus
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_types_microvm_proto_init() }
func file_types_microvm_proto_init() {
	if File_types_microvm_proto != nil {
		return
	}
	file_types_microvm_proto_msgTypes[1].OneofWrappers = []any{}
	file_types_microvm_proto_msgTypes[2].OneofWrappers = []any{}
	file_types_microvm_proto_msgTypes[3].OneofWrappers = []any{}
	file_types_microvm_proto_msgTypes[4].OneofWrappers = []any{}
	file_types_microvm_proto_msgTypes[5].OneofWrappers = []any{}
	file_types_microvm_proto_msgTypes[6].OneofWrappers = []any{}
	file_types_microvm_proto_msgTypes[7].OneofWrappers = []any{}
	file_types_microvm_proto_msgTypes[14].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_microvm_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_microvm_proto_goTypes,
		DependencyIndexes: file_types_microvm_proto_depIdxs,
		EnumInfos:         file_types_microvm_proto_enumTypes,
		MessageInfos:      file_types_microvm_proto_msgTypes,
	}.Build()
	File_types_microvm_proto = out.File
	file_types_microvm_proto_rawDesc = nil
	file_types_microvm_proto_goTypes = nil
	file_types_microvm_proto_depIdxs = nil
}
