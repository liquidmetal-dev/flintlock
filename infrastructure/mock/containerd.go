// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/liquidmetal-dev/flintlock/infrastructure/containerd (interfaces: Client)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	containerd "github.com/containerd/containerd"
	tasks "github.com/containerd/containerd/api/services/tasks/v1"
	version "github.com/containerd/containerd/api/services/version/v1"
	containers "github.com/containerd/containerd/containers"
	content "github.com/containerd/containerd/content"
	events "github.com/containerd/containerd/events"
	images "github.com/containerd/containerd/images"
	leases "github.com/containerd/containerd/leases"
	namespaces "github.com/containerd/containerd/namespaces"
	platforms "github.com/containerd/containerd/platforms"
	introspection "github.com/containerd/containerd/services/introspection"
	snapshots "github.com/containerd/containerd/snapshots"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/opencontainers/image-spec/specs-go/v1"
	grpc "google.golang.org/grpc"
	grpc_health_v1 "google.golang.org/grpc/health/grpc_health_v1"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Conn mocks base method.
func (m *MockClient) Conn() *grpc.ClientConn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Conn")
	ret0, _ := ret[0].(*grpc.ClientConn)
	return ret0
}

// Conn indicates an expected call of Conn.
func (mr *MockClientMockRecorder) Conn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conn", reflect.TypeOf((*MockClient)(nil).Conn))
}

// ContainerService mocks base method.
func (m *MockClient) ContainerService() containers.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerService")
	ret0, _ := ret[0].(containers.Store)
	return ret0
}

// ContainerService indicates an expected call of ContainerService.
func (mr *MockClientMockRecorder) ContainerService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerService", reflect.TypeOf((*MockClient)(nil).ContainerService))
}

// Containers mocks base method.
func (m *MockClient) Containers(arg0 context.Context, arg1 ...string) ([]containerd.Container, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Containers", varargs...)
	ret0, _ := ret[0].([]containerd.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Containers indicates an expected call of Containers.
func (mr *MockClientMockRecorder) Containers(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Containers", reflect.TypeOf((*MockClient)(nil).Containers), varargs...)
}

// ContentStore mocks base method.
func (m *MockClient) ContentStore() content.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContentStore")
	ret0, _ := ret[0].(content.Store)
	return ret0
}

// ContentStore indicates an expected call of ContentStore.
func (mr *MockClientMockRecorder) ContentStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContentStore", reflect.TypeOf((*MockClient)(nil).ContentStore))
}

// DiffService mocks base method.
func (m *MockClient) DiffService() containerd.DiffService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiffService")
	ret0, _ := ret[0].(containerd.DiffService)
	return ret0
}

// DiffService indicates an expected call of DiffService.
func (mr *MockClientMockRecorder) DiffService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiffService", reflect.TypeOf((*MockClient)(nil).DiffService))
}

// EventService mocks base method.
func (m *MockClient) EventService() containerd.EventService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventService")
	ret0, _ := ret[0].(containerd.EventService)
	return ret0
}

// EventService indicates an expected call of EventService.
func (mr *MockClientMockRecorder) EventService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventService", reflect.TypeOf((*MockClient)(nil).EventService))
}

// Fetch mocks base method.
func (m *MockClient) Fetch(arg0 context.Context, arg1 string, arg2 ...containerd.RemoteOpt) (images.Image, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Fetch", varargs...)
	ret0, _ := ret[0].(images.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockClientMockRecorder) Fetch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockClient)(nil).Fetch), varargs...)
}

// GetImage mocks base method.
func (m *MockClient) GetImage(arg0 context.Context, arg1 string) (containerd.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", arg0, arg1)
	ret0, _ := ret[0].(containerd.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockClientMockRecorder) GetImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockClient)(nil).GetImage), arg0, arg1)
}

// GetLabel mocks base method.
func (m *MockClient) GetLabel(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabel", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabel indicates an expected call of GetLabel.
func (mr *MockClientMockRecorder) GetLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabel", reflect.TypeOf((*MockClient)(nil).GetLabel), arg0, arg1)
}

// GetSnapshotterSupportedPlatforms mocks base method.
func (m *MockClient) GetSnapshotterSupportedPlatforms(arg0 context.Context, arg1 string) (platforms.MatchComparer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotterSupportedPlatforms", arg0, arg1)
	ret0, _ := ret[0].(platforms.MatchComparer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotterSupportedPlatforms indicates an expected call of GetSnapshotterSupportedPlatforms.
func (mr *MockClientMockRecorder) GetSnapshotterSupportedPlatforms(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotterSupportedPlatforms", reflect.TypeOf((*MockClient)(nil).GetSnapshotterSupportedPlatforms), arg0, arg1)
}

// HealthService mocks base method.
func (m *MockClient) HealthService() grpc_health_v1.HealthClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthService")
	ret0, _ := ret[0].(grpc_health_v1.HealthClient)
	return ret0
}

// HealthService indicates an expected call of HealthService.
func (mr *MockClientMockRecorder) HealthService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthService", reflect.TypeOf((*MockClient)(nil).HealthService))
}

// ImageService mocks base method.
func (m *MockClient) ImageService() images.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageService")
	ret0, _ := ret[0].(images.Store)
	return ret0
}

// ImageService indicates an expected call of ImageService.
func (mr *MockClientMockRecorder) ImageService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageService", reflect.TypeOf((*MockClient)(nil).ImageService))
}

// IntrospectionService mocks base method.
func (m *MockClient) IntrospectionService() introspection.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntrospectionService")
	ret0, _ := ret[0].(introspection.Service)
	return ret0
}

// IntrospectionService indicates an expected call of IntrospectionService.
func (mr *MockClientMockRecorder) IntrospectionService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntrospectionService", reflect.TypeOf((*MockClient)(nil).IntrospectionService))
}

// IsServing mocks base method.
func (m *MockClient) IsServing(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsServing", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsServing indicates an expected call of IsServing.
func (mr *MockClientMockRecorder) IsServing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsServing", reflect.TypeOf((*MockClient)(nil).IsServing), arg0)
}

// LeasesService mocks base method.
func (m *MockClient) LeasesService() leases.Manager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeasesService")
	ret0, _ := ret[0].(leases.Manager)
	return ret0
}

// LeasesService indicates an expected call of LeasesService.
func (mr *MockClientMockRecorder) LeasesService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeasesService", reflect.TypeOf((*MockClient)(nil).LeasesService))
}

// ListImages mocks base method.
func (m *MockClient) ListImages(arg0 context.Context, arg1 ...string) ([]containerd.Image, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImages", varargs...)
	ret0, _ := ret[0].([]containerd.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockClientMockRecorder) ListImages(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockClient)(nil).ListImages), varargs...)
}

// LoadContainer mocks base method.
func (m *MockClient) LoadContainer(arg0 context.Context, arg1 string) (containerd.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadContainer", arg0, arg1)
	ret0, _ := ret[0].(containerd.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadContainer indicates an expected call of LoadContainer.
func (mr *MockClientMockRecorder) LoadContainer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadContainer", reflect.TypeOf((*MockClient)(nil).LoadContainer), arg0, arg1)
}

// NamespaceService mocks base method.
func (m *MockClient) NamespaceService() namespaces.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceService")
	ret0, _ := ret[0].(namespaces.Store)
	return ret0
}

// NamespaceService indicates an expected call of NamespaceService.
func (mr *MockClientMockRecorder) NamespaceService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceService", reflect.TypeOf((*MockClient)(nil).NamespaceService))
}

// NewContainer mocks base method.
func (m *MockClient) NewContainer(arg0 context.Context, arg1 string, arg2 ...containerd.NewContainerOpts) (containerd.Container, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewContainer", varargs...)
	ret0, _ := ret[0].(containerd.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewContainer indicates an expected call of NewContainer.
func (mr *MockClientMockRecorder) NewContainer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewContainer", reflect.TypeOf((*MockClient)(nil).NewContainer), varargs...)
}

// Pull mocks base method.
func (m *MockClient) Pull(arg0 context.Context, arg1 string, arg2 ...containerd.RemoteOpt) (containerd.Image, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Pull", varargs...)
	ret0, _ := ret[0].(containerd.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pull indicates an expected call of Pull.
func (mr *MockClientMockRecorder) Pull(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockClient)(nil).Pull), varargs...)
}

// Push mocks base method.
func (m *MockClient) Push(arg0 context.Context, arg1 string, arg2 v1.Descriptor, arg3 ...containerd.RemoteOpt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Push", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockClientMockRecorder) Push(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockClient)(nil).Push), varargs...)
}

// Reconnect mocks base method.
func (m *MockClient) Reconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconnect indicates an expected call of Reconnect.
func (mr *MockClientMockRecorder) Reconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconnect", reflect.TypeOf((*MockClient)(nil).Reconnect))
}

// Restore mocks base method.
func (m *MockClient) Restore(arg0 context.Context, arg1 string, arg2 containerd.Image, arg3 ...containerd.RestoreOpts) (containerd.Container, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Restore", varargs...)
	ret0, _ := ret[0].(containerd.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restore indicates an expected call of Restore.
func (mr *MockClientMockRecorder) Restore(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockClient)(nil).Restore), varargs...)
}

// Runtime mocks base method.
func (m *MockClient) Runtime() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Runtime")
	ret0, _ := ret[0].(string)
	return ret0
}

// Runtime indicates an expected call of Runtime.
func (mr *MockClientMockRecorder) Runtime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Runtime", reflect.TypeOf((*MockClient)(nil).Runtime))
}

// Server mocks base method.
func (m *MockClient) Server(arg0 context.Context) (containerd.ServerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Server", arg0)
	ret0, _ := ret[0].(containerd.ServerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Server indicates an expected call of Server.
func (mr *MockClientMockRecorder) Server(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Server", reflect.TypeOf((*MockClient)(nil).Server), arg0)
}

// SnapshotService mocks base method.
func (m *MockClient) SnapshotService(arg0 string) snapshots.Snapshotter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotService", arg0)
	ret0, _ := ret[0].(snapshots.Snapshotter)
	return ret0
}

// SnapshotService indicates an expected call of SnapshotService.
func (mr *MockClientMockRecorder) SnapshotService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotService", reflect.TypeOf((*MockClient)(nil).SnapshotService), arg0)
}

// Subscribe mocks base method.
func (m *MockClient) Subscribe(arg0 context.Context, arg1 ...string) (<-chan *events.Envelope, <-chan error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(<-chan *events.Envelope)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockClientMockRecorder) Subscribe(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockClient)(nil).Subscribe), varargs...)
}

// TaskService mocks base method.
func (m *MockClient) TaskService() tasks.TasksClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskService")
	ret0, _ := ret[0].(tasks.TasksClient)
	return ret0
}

// TaskService indicates an expected call of TaskService.
func (mr *MockClientMockRecorder) TaskService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskService", reflect.TypeOf((*MockClient)(nil).TaskService))
}

// Version mocks base method.
func (m *MockClient) Version(arg0 context.Context) (containerd.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", arg0)
	ret0, _ := ret[0].(containerd.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockClientMockRecorder) Version(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockClient)(nil).Version), arg0)
}

// VersionService mocks base method.
func (m *MockClient) VersionService() version.VersionClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VersionService")
	ret0, _ := ret[0].(version.VersionClient)
	return ret0
}

// VersionService indicates an expected call of VersionService.
func (mr *MockClientMockRecorder) VersionService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VersionService", reflect.TypeOf((*MockClient)(nil).VersionService))
}
